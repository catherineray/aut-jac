
"""
name key: 
f3 = y^2 - (x^5 - x) has order 48

f4 = y^8 - x*(x-1)^5 
f5 = y^4 - x*(x - 1)*(x + 1) #dami's x

f6 = y^12 - x*(x - 1)^7
f7 = y^5 - x*(x - 1)^2*(x + 1)^4 


f8 = y^3 - (x^4 - 1)
f9 = y^4-(x^2 - 1)(X^2 - a^3)
f10 = y^12 - x(x-1)^5
"""

magma.load("CullPB.m")

from sage.schemes.riemann_surfaces.riemann_surface import RiemannSurface, RiemannSurfaceSum, numerical_inverse
R.<x,y> = QQ[]


#magma.AttachSpec("~/endomorphisms/endomorphisms/magma/spec")

gg = 5

if gg == 3:
   #dummy hyperelliptic genus 3
   f = y^2 - (x^8 + 2*x^6 + 4*x^4 + 6*x^2 + 8)
if gg == 4: 
   #dummy hyperelliptic genus 4
   f = y^2 - (x^10 + 2*x^8 + 4*x^6 + 6*x^4 + 8*x^2 + 10)
if gg == 5:
   #dummy hyperelliptic genus 5
   f = y^2 - (x^12 + 2*x^10 + 4*x^8 + 6*x^6 + 8*x^4 + 10*x^2 + 12)
else: pass 


S = RiemannSurface(f, prec = 150)
print Curve(f).genus()
CC = ComplexField(150)

print "hi"

def unique(list1):
    # intilize a null list
    unique_list = []
     
    # traverse for all elements
    for x in list1:
        # check if exists in unique_list or not
        if x not in unique_list:
            unique_list.append(x)
    # print list
    #list(filter(None.__ne__, unique_list))
    for x in unique_list:
        print x,



"""
f3
[0.33333333333333333333333333333 + 0.94280904158206336586779248281*I 0.33333333333333333333333333333 - 0.47140452079103168293389624140*I]
[0.33333333333333333333333333333 - 0.47140452079103168293389624140*I 0.33333333333333333333333333333 + 0.94280904158206336586779248281*I]
"""


"""
#Klein quartic trial
a = sqrt(7)*I
A = matrix(CC, [[(-1 + 3*a)*1/8, (-1-a)*1/4, (-3 + a)*1/8], [(-1-a)*1/4, (1+a)*1/2, (-1-a)*1/4], [(-3+a)*1/8, (-1-a)*1/4, (7+3*a)*1/8 ]])
B = matrix.identity(3)
P = block_matrix([[A, B]], subdivide = False)
""" 

"""
#f4 = y^8 - x (x - 1)^5

A = matrix(CC, [[1 - I, -((1 + I)/(1 + sqrt(2))), (1 + I)/(1 + sqrt(2))], [-2*I, 2*I, 2*I], [-1 - I, (1 - I)*(1 + sqrt(2)), (-1 + I)*(1 + sqrt(2))]])
B = matrix(CC, [[1 + I, sqrt(2), 2 - sqrt(2)], [2*I, -2, -2], [1 - I, I*sqrt(2), I*(-2 - sqrt(2))]])
P = block_matrix([[A, B]], subdivide = False)
"""

"""
#Small stellated (1243)
z = e^(2*pi*I/10)
l = 0.8486411 #pg 7
phi = (sqrt(5)+1)/2

A = matrix(CC, [[1 - z^4, z^2*(1 - z^4), z^4*(1 - z^4), z^6*(1 - z^4)], [z^7*(1-z^8)*(-1 + l*phi), z^11*(1-z^8)*(-1 + l*phi), z^15*(1-z^8)*(-1 + l*phi), z^19*(1-z^8)*(-1 + l*phi)], [z^6*(1-z^6)*phi*(1-l), z^14*(1-z^6)*phi*(1-l), z^22*(1-z^6)*phi*(1-l), z^30*(1-z^6)*phi*(1-l)], [z^4*(1-z^2)*l, z^10*(1-z^2)*l, z^16*(1-z^2)*l, z^22*(1-z^2)*l]])
B = matrix(CC, [[z^7*(1-z^8)*(-1 + l*phi), z^11*(1-z^8)*(-1 + l*phi) , z^15*(1-z^8)*(-1 + l*phi),  z^19*(1-z^8)*(-1 + l*phi)], [z^6*(1-z^6)*phi*(1-l), z^14*(1-z^6)*phi*(1-l), z^22*(1-z^6)*phi*(1-l), z^30*(1-z^6)*phi*(1-l)], [z^4*(1-z^2)*l, z^10*(1-z^2)*l, z^16*(1-z^2)*l, z^22*(1-z^2)*l], [1-z^4, z^2*(1-z^4), z^4*(1-z^4), z^6*(1-z^4)]])

P = block_matrix([[A, B]], subdivide = False)
"""

P = matrix

#symmetric period matrix f6, I-WP, Octa-8

#unscaled
"""
a = sqrt(2 + sqrt(3))*(1 + sqrt(3))/sqrt(2); 
b = sqrt(3);
c = sqrt(3);
d = (3 - sqrt(3))*(sqrt(2)*sqrt(2 + sqrt(3)));

A = matrix(CC, [[a, a *exp((pi* I)/6), a *exp((2 *pi* I)/6), a *exp((3 *pi* I)/6)], [b, b *exp((pi* I)/3), b *exp((2 *pi* I)/3), b *exp((3 *pi* I)/3)],[c, c *exp((2 *pi* I)/3), c *exp((4 *pi* I)/3), c *exp((6 *pi* I)/3)], [d , d*exp((7 *pi* I)/6), d *exp((14 *pi* I)/6), d *exp((21 *pi* I)/6)]])

B = matrix(CC, [[a *exp((4 *pi* I)/6), a *exp((5 *pi* I)/6), a *exp((6 *pi* I)/6), a *exp((7 *pi* I)/6)], [b *exp((4 *pi* I)/3), b *exp((5 *pi* I)/3), b *exp((6 *pi* I)/3), b *exp((7 *pi* I)/3)], [c *exp((8 *pi* I)/3), c *exp((10 *pi* I)/3), c *exp((12 *pi* I)/3), c *exp((14 *pi* I)/3)], [d *exp((28 *pi* I)/6), d *exp((35 *pi* I)/6), d *exp((42 *pi* I)/6),d *exp((49 *pi* I)/6)]])
"""

"""
#scaled 

A = matrix(CC, [[1, exp((pi*I)/6), exp((pi*I)/3), I], [1, exp((pi*I)/3), exp((2*pi*I)/3), -1 ], [1, exp((2*pi*I)/3), exp(-(2*pi*I)/3), 1], [1, exp(-(5*pi*I)/6), exp((pi*I)/3), -I]])

B = matrix(CC, [[exp((2*pi*I)/3), exp((5*pi*I)/6), -1, exp(-(5*pi*I)/6)], [exp(-(2*pi*I)/3), exp(-(pi*I)/3), 1, exp((pi*I)/3)], [exp((2*pi*I)/3), exp(-(2*pi*I)/3), 1, exp((2*pi*I)/3)], [exp((2*pi*I)/3), exp(-(pi*I)/6), -1, exp((pi*I)/6)]])

P = block_matrix([[A, B]], subdivide = False)
"""
"""

(I guess this is from the old calculation for f6?)

smoll = matrix(CC, [[-0.5-0.866025*I, 1.5-0.866025*I, 1.5+0.866025*I, 1.73205*I], [1.5-0.866025*I, 1+1.73205*I, 1.73205*I, -1.5+0.866025*I],  [1.5+0.866025*I, 1.73205*I, -2+1.73205*I, -1.5-0.866025*I], [1.73205*I, -1.5+0.866025*I, -1.5-0.866025*I, -0.5-0.866025*I]]
#P = matrix(CC,  [[-((1 + sqrt(3) *I)/2), ((3 - sqrt(3) *I)/2), ((3 + sqrt(3) *I)/2), sqrt(3) *I], [((3 - sqrt(3) *I)/2), 1 + sqrt(3) *I, sqrt(3) *I, -((3 - sqrt(3) *I)/2)], [((3 + sqrt(3) *I)/2), sqrt(3) *I, -2 + sqrt(3) *I, -((3 + sqrt(3) *I)/2)], [sqrt(3) *I, -((3 - sqrt(3) *I)/2), -((3 + sqrt(3) *I)/2), -((1 + sqrt(3) *I)/2)]])

A = matrix(CC, [[3 + 2*sqrt(3), (3 + 2*sqrt(3))*exp((I*pi)/6), (3 + 2*sqrt(3))*exp((I*pi)/3), I*(3 + 2*sqrt(3))], [1, exp((I *pi)/3), exp((2 * I *pi)/3), -1], [sqrt(3), sqrt(3)*exp((2 *I *pi)/3), sqrt(3)*exp(-((2* I *pi)/3)), sqrt(3)], [2 - sqrt(3), (2 - sqrt(3))*exp(-((5*I *pi)/6)), (2 - sqrt(3))*exp((I *pi)/3), -I*(2 - sqrt(3))]])
B = matrix(CC,[[(3 + 2*sqrt(3))*exp((2*I *pi)/3), (3 + 2*sqrt(3))*exp((5 * I *pi)/6), -3 - 2*sqrt(3), (3 + 2*sqrt(3))*exp(-((5 * I *pi)/6))], [exp(-((2*I *pi)/3)), exp(-((I*pi)/3)), 1, exp((I*pi)/3)], [sqrt(3)*exp((2 *I *pi)/3), sqrt(3)*exp(-((2 *I *pi)/3)), sqrt(3), sqrt(3)*exp((2*I*pi)/3)], [(2 - sqrt(3))*exp((2 *I *pi)/3), 2 - sqrt(3), -2 + sqrt(3), (2 - sqrt(3))*exp((I *pi)/6)]])

"""



"""
#f8 y^3-(x^4-1), genus 3
a= 3 + sqrt(3)
b = 2*sqrt(3)
c = 3-sqrt(3)

P= matrix(CC, [[a, a*exp((pi* I)/6), a *exp((2 *pi* I)/6), a *exp((3 *pi* I)/6), a *exp((4 *pi* I)/6), a *exp((5 *pi* I)/6)], [b, b *exp((pi* I)/3), b *exp((2 *pi* I)/3), b *exp((3 *pi* I)/3), b *exp((4 *pi* I)/3), b *exp((5 *pi* I)/3)], [c, c *exp((5 *pi* I)/6), c *exp((10 *pi* I)/6), c *exp((15 *pi* I)/6), c *exp((20 *pi* I)/6), c *exp((25 *pi* I)/6)]] )
"""

  


#f9 or y^4-(x^2-1)(x^2-a^2)^3, genus 3
#P = matrix(CC, [[2,3*sqrt(2)*exp((pi*I)/4), 2*exp((2*pi*I)/4), 3*sqrt(2)*exp((3*pi*I)/4), 2*exp((4*pi*I)/4), 3*sqrt(2)*exp((5*pi*I)/4)], [2 , 2*I, -2 , -2*I, 2 , 2*I], [2/3, (2*sqrt(2))/3*exp((3*pi*I)/4), 2/3*exp((6 *pi* I)/4), (2 *sqrt(2))/3*exp((pi* I)/4), 2/3 *exp((4 *pi* I)/4), (2 *sqrt(2))/3 *exp((7 *pi* I)/4)]])

#P = matrix(CC, [[2, 3+3*I, 2*I, -3 + 3*I, -2, -3-3*I], [2, 2*I, -2, -2*I, 2, 2*I], [2/3, (2/3)*(-1+I), -2*I/3, (2/3)*(1+I), -2/3, (2/3)*(1-I)]])

"""
#f10
a = 4 + 2*sqrt(3)
b = 2
c = 4-2*sqrt(3)

P = matrix(CC, [[a, a *exp((pi* I)/6), a *exp((2 *pi* I)/6), a*exp((3 *pi* I)/6), a *exp((4 *pi* I)/6), a *exp((5 *pi* I)/6)],[b, b *exp((pi* I)/2), b *exp((2 *pi* I)/2), b *exp((3 *pi* I)/2), b *exp((4 *pi* I)/2), b *exp((5 *pi* I)/2)],[c, c *exp((5 *pi* I)/6), c *exp((10 *pi* I)/6), c *exp((15 *pi* I)/6), c *exp((20 *pi* I)/6), c *exp((25 *pi* I)/6)]] );
"""

"""
#Shiga curve
a = sqrt(2 + sqrt(3))
b = sqrt(3)
#c = sqrt(2 - sqrt(3))
c = 4/(1 + sqrt(3))

A = matrix(CC, [[a, a*exp(pi*I/6), a*exp(2*pi*I/6), a*exp(3*pi*I/6)], [1/a, exp(pi*I/3)/a, exp(2*pi*I/3)/a, exp(3*pi*I/3)/a], [b, b*exp(2*pi*I/3), b*exp(4*pi*I/3), b], [c, c*exp(7*pi*I/6), c*exp(14*pi*I/6), c*exp(21*pi*I/6)]])
B = matrix(CC, [[a*exp(4 *pi* I/6), a*exp(5 *pi* I/6), a*exp(6 *pi* I/6), a*exp(7 *pi* I/6)], [exp(4 *pi* I/3)/a, exp(5 *pi* I/3)/a, exp(6 *pi* I/3)/a, exp(7 *pi* I/3)/a], [b*exp(2 *pi* I/3), b*exp(4 *pi* I/3), b, b*exp(2 *pi* I/3)], [c*exp(28 *pi* I/6), c*exp(35 *pi* I/6), c*exp(42 *pi* I/6), c*exp(49 *pi* I/6)]])
"""


P = magma(P)
P = magma.ChangeRing(P, magma.ComplexFieldExtra(30))

print "Determining polarizations..."
Es = (magma.CullPB(magma.FindPolarizationBasis(P), P)).sage()
#print len(Es)
save(Es, "Es")


def check_order(L):
  ree = []
  n = 2
  for l in L: 
     if l^n == matrix.identity(8):
        ree.append(l)
     else:
        pass
  print ree

Aut = []
Es = load("Es.sobj")
for E in Es:
    T = magma.PrincipalBasis(E);
    Ps = (P * magma.ChangeRing(T^(-1), magma.BaseRing(P))).sage();
    g = gg
    Am = Ps[0:g,0:g]
    tau = numerical_inverse(Am)*Ps[0:g,g:2*g]
    taui = Matrix([ [ c.imag() for c in r ] for r in tau.rows() ])
    #print "Testing tau:"
    #print max([ abs(c) for c in (tau - tau.transpose()).list() ])
    #print taui.eigenvalues()

    S = RiemannSurfaceSum([ S ])
    S.tau = tau
    G = S.symplectic_automorphism_group()
    Aut.append(G.order()) 
    #for searching for the alternative symplectic groups
    #if G.order() not in Aut
    #print G
    #print type(G)
    #print "Number of automorphisms:"

print "Automorphism orders:"
#print unique(Aut).sort()
print Aut


"""
if G.order() == 192:
       #Aut.append(G.order())
       print G.gens()[1:40]
       #check_order(G.gens())
       break
"""


